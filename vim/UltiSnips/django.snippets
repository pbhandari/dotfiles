# extends python

# Model Fields

# Note: Optional arguments are using defaults that match what Django will use
# as a default, e.g. with max_length fields.  Doing this as a form of self
# documentation and to make it easy to know whether you should override the
# default or not.

# Note: Optional arguments that are booleans will use the opposite since you
# can either not specify them, or override them, e.g. auto_now_add=False.

snippet m_auto
${1:FIELDNAME} = models.AutoField()
endsnippet

snippet m_bool
${1:FIELDNAME} = models.BooleanField(${2:default=True})
endsnippet

snippet m_char
${1:FIELDNAME} = models.CharField(max_length=${2}${3:, blank=True})
endsnippet

snippet m_comma
${1:FIELDNAME} = models.CommaSeparatedIntegerField(max_length=${2}${3:, blank=True})
endsnippet

snippet m_date
${1:FIELDNAME} = models.DateField(${2:auto_now_add=True, auto_now=True}${3:, blank=True, null=True})
endsnippet

snippet m_datetime
${1:FIELDNAME} = models.DateTimeField(${2:auto_now_add=True, auto_now=True}${3:, blank=True, null=True})
endsnippet

snippet m_decimal
${1:FIELDNAME} = models.DecimalField(max_digits=${2}, decimal_places=${3})
endsnippet

snippet m_email
${1:FIELDNAME} = models.EmailField(max_length=${2:75}${3:, blank=True})
endsnippet

snippet m_file
${1:FIELDNAME} = models.FileField(upload_to=${2:path/for/upload}${3:, max_length=100})
endsnippet

snippet m_filepath
${1:FIELDNAME} = models.FilePathField(path=${2:"/abs/path/to/dir"}${3:, max_length=100}${4:, match="*.ext"}${5:, recursive=True}${6:, blank=True, })
endsnippet

snippet m_float
${1:FIELDNAME} = models.FloatField()
endsnippet

snippet m_image
${1:FIELDNAME} = models.ImageField(upload_to=${2:path/for/upload}${3:, height_field=height, width_field=width}${4:, max_length=100})
endsnippet

snippet m_int
${1:FIELDNAME} = models.IntegerField()
endsnippet

snippet m_ip
${1:FIELDNAME} = models.IPAddressField()
endsnippet

snippet m_nullbool
${1:FIELDNAME} = models.NullBooleanField()
endsnippet

snippet m_posint
${1:FIELDNAME} = models.PositiveIntegerField()
endsnippet

snippet m_possmallint
${1:FIELDNAME} = models.PositiveSmallIntegerField()
endsnippet

snippet m_slug
${1:FIELDNAME} = models.SlugField(max_length=${2:50}${3:, blank=True})
endsnippet

snippet m_smallint
${1:FIELDNAME} = models.SmallIntegerField()
endsnippet

snippet m_text
${1:FIELDNAME} = models.TextField(${2:blank=True})
endsnippet

snippet m_time
${1:FIELDNAME} = models.TimeField(${2:auto_now_add=True, auto_now=True}${3:, blank=True, null=True})
endsnippet

snippet m_url
${1:FIELDNAME} = models.URLField(${2:verify_exists=False}${3:, max_length=200}${4:, blank=True})
endsnippet

snippet m_xml
${1:FIELDNAME} = models.XMLField(schema_path=${2:None}${3:, blank=True})
endsnippet


# Relational Fields
snippet m_fk
${1:FIELDNAME} = models.ForeignKey(${2:OtherModel}${3:, related_name=''}${4:, limit_choices_to=}${5:, to_field=''})
endsnippet

snippet m_m2m
${1:FIELDNAME} = models.ManyToManyField(${2:OtherModel}${3:, related_name=''}${4:, limit_choices_to=}${5:, symmetrical=False}${6:, through=''}${7:, db_table=''})
endsnippet

snippet m_o2o
${1:FIELDNAME} = models.OneToOneField(${2:OtherModel}${3:, parent_link=True}${4:, related_name=''}${5:, limit_choices_to=}${6:, to_field=''})
endsnippet


# Form Fields

# Note: Optional arguments are using defaults that match what Django will use
# as a default, e.g. with max_length fields.  Doing this as a form of self
# documentation and to make it easy to know whether you should override the
# default or not.

# Note: Optional arguments that are booleans will use the opposite since you
# can either not specify them, or override them, e.g. required=False.

snippet f_auto
${1:FIELDNAME} = forms.AutoField()
endsnippet

snippet f_bool
${1:FIELDNAME} = forms.BooleanField(label='')
endsnippet

snippet f_char
${1:FIELDNAME} = forms.CharField(label='')
endsnippet

snippet f_comma
${1:FIELDNAME} = forms.CommaSeparatedIntegerField(label='')
endsnippet

snippet f_date
${1:FIELDNAME} = forms.DateField(label='')
endsnippet

snippet f_datetime
${1:FIELDNAME} = forms.DateTimeField(label='')
endsnippet

snippet f_decimal
${1:FIELDNAME} = forms.DecimalField(label='')
endsnippet

snippet f_email
${1:FIELDNAME} = forms.EmailField(label='')
endsnippet

snippet file
${1:FIELDNAME} = forms.FileField(label='')
endsnippet

snippet filepath
${1:FIELDNAME} = forms.FilePathField(label='')
endsnippet

snippet f_float
${1:FIELDNAME} = forms.FloatField()
endsnippet

snippet f_image
${1:FIELDNAME} = forms.ImageField(label='')
endsnippet

snippet f_int
${1:FIELDNAME} = forms.IntegerField(label='')
endsnippet

snippet f_ip
${1:FIELDNAME} = forms.IPAddressField(label='')
endsnippet

snippet f_nullbool
${1:FIELDNAME} = forms.NullBooleanField()
endsnippet

snippet f_posint
${1:FIELDNAME} = forms.PositiveIntegerField(label='')
endsnippet

snippet f_possmallint
${1:FIELDNAME} = forms.PositiveSmallIntegerField(label='')
endsnippet

snippet f_slug
${1:FIELDNAME} = forms.SlugField(label='')
endsnippet

snippet f_small
${1:FIELDNAME} = forms.SmallIntegerField()
endsnippet

snippet f_text
${1:FIELDNAME} = forms.CharField(label='', widget=forms.Textarea)
endsnippet

snippet f_time
${1:FIELDNAME} = forms.TimeField(label='')
endsnippet

snippet f_url
${1:FIELDNAME} = forms.URLField(label='', ${2:verify_exists=False}${3:, max_length=200})
endsnippet

snippet f_xml
${1:FIELDNAME} = forms.XMLField(schema_path=${2:None}${3:, required=True})
endsnippet

snippet f_choices
${1:FIELDNAME} = forms.ChoiceField(label='', ${2:choices=''})

snippet f_multiple
${1:FIELDNAME} = forms.MultipleChoiceField(label='', ${2:choices=''})


# Relational Fields
snippet f_fk
${1:FIELDNAME} = forms.ModelChoiceField(${2:, queryset=Model.objects.all()}${3:, empty_label=''})
endsnippet

snippet f_m2m
${1:FIELDNAME} = forms.ModelMultipleChoiceField(${2:, queryset=Model.objects.all()}${3:, empty_label=''})
endsnippet


##
## Code Skeletons
##

# Methods

snippet __unicode__
def __unicode__(self):
    ${1}
endsnippet

snippet absolute_url
    @models.permalink
    def get_absolute_url(self):
        return ('${1:view_or_url_name}' ${2})
endsnippet

# Model Skeletons

snippet model
    class ${1:ModelName}(models.Model):
        """${2:docstring}"""
        ${3}

        class Meta:
            ${4}

        def __unicode__(self):
            ${5}

        def save(self):
            ${6}

        @models.permalink
        def get_absolute_url(self):
            return ('${7:view_or_url_name}' ${8})
endsnippet


# Form Skeletons

snippet form
    class ${1:FormName}(forms.Form):
        """${2:docstring}"""
        ${3}
endsnippet

snippet modelform
    class ${1:FormName}(forms.ModelForm):
        """${2:docstring}"""
        ${3}

        class Meta:
            model = ${4}
endsnippet


# Forms methods

snippet form "Defining form instance" b
form = $1(request.POST or None)
endsnippet

snippet form_data "Defining form instance with object data" b
form = $1(request.POST or None, instance=${2:object_name})
endsnippet

snippet is_valid "Creating validation verification" b
if ${1:form}.is_valid():
    $1.save()
    ${2}
endsnippet

snippet clean "clean method" b
def clean(self):
    cleaned_data = super($1, self).clean()

    return cleaned_data
endsnippet

snippet clean_field "clean field method" b
def clean_$1(self):
    data = self.cleaned_data['$1']

    if not data:
        raise forms.ValidationError("Field is blank")

    return data
endsnippet

snippet cleaned_data "cleaned_data field" b
$1 = form.cleaned_data['$1']
endsnippet


# Admin

snippet modeladmin
    class ${1:ModelName}Admin(admin.ModelAdmin):
        ${2}

    admin.site.register($1, $1Admin)
endsnippet

snippet tabularinline
    class ${1:ModelName}Inline(admin.TabularInline):
        model = $1
        extra = ${2:3}
endsnippet

snippet stackedinline
    class ${1:ModelName}Inline(admin.StackedInline):
        model = $1
        extra = ${2:3}
endsnippet


# Views

snippet render_to_response
    return render_to_response('${1:template.html}', {
            ${2}
        }${3:, context_instance=RequestContext(request)}
    )
endsnippet

snippet render
    return render(request, '${1:template.html}', {
            ${2}
        })
endsnippet

snippet redirect "redirect method" b
return redirect($1)
endsnippet

snippet action
    def ${1:action}(request):
        """ Action """
        pass
endsnippet


# Tests

snippet testclass
class ${1:ClassTest}(TestCase):
"""{$2}"""
pass
endsnippet

snippet setup
def setUp(self):
"""${1}"""
pass
endsnippet

snippet test
def test_${1:method}(self):
"""{$2}"""
pass
endsnippet
